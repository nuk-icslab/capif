/**
 * CAPIF_Publish_Service_API
 * API for publishing service APIs. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "capif/model/InterfaceDescription.h"

#include <sstream>

#include "capif/model/Helpers.h"

namespace org::openapitools::server::model {

InterfaceDescription::InterfaceDescription() {
  m_Ipv4Addr = "";
  m_Ipv4AddrIsSet = false;
  m_Ipv6Addr = "";
  m_Ipv6AddrIsSet = false;
  m_Port = 0;
  m_PortIsSet = false;
  m_SecurityMethodsIsSet = false;
}

void InterfaceDescription::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw org::openapitools::server::helpers::ValidationException(msg.str());
  }
}

bool InterfaceDescription::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool InterfaceDescription::validate(std::stringstream& msg,
                                    const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "InterfaceDescription" : pathPrefix;

  if (portIsSet()) {
    const int32_t& value = m_Port;
    const std::string currentValuePath = _pathPrefix + ".port";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
    if (value > 65535) {
      success = false;
      msg << currentValuePath << ": must be less than or equal to 65535;";
    }
  }

  if (securityMethodsIsSet()) {
    const std::vector<SecurityMethod>& value = m_SecurityMethods;
    const std::string currentValuePath = _pathPrefix + ".securityMethods";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i = 0;
      for (const SecurityMethod& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".securityMethods") &&
                  success;

        i++;
      }
    }
  }

  return success;
}

bool InterfaceDescription::operator==(const InterfaceDescription& rhs) const {
  return

      ((!ipv4AddrIsSet() && !rhs.ipv4AddrIsSet()) ||
       (ipv4AddrIsSet() && rhs.ipv4AddrIsSet() &&
        getIpv4Addr() == rhs.getIpv4Addr())) &&

      ((!ipv6AddrIsSet() && !rhs.ipv6AddrIsSet()) ||
       (ipv6AddrIsSet() && rhs.ipv6AddrIsSet() &&
        getIpv6Addr() == rhs.getIpv6Addr())) &&

      ((!portIsSet() && !rhs.portIsSet()) ||
       (portIsSet() && rhs.portIsSet() && getPort() == rhs.getPort())) &&

      ((!securityMethodsIsSet() && !rhs.securityMethodsIsSet()) ||
       (securityMethodsIsSet() && rhs.securityMethodsIsSet() &&
        getSecurityMethods() == rhs.getSecurityMethods()))

          ;
}

bool InterfaceDescription::operator!=(const InterfaceDescription& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const InterfaceDescription& o) {
  j = nlohmann::json();
  if (o.ipv4AddrIsSet()) j["ipv4Addr"] = o.m_Ipv4Addr;
  if (o.ipv6AddrIsSet()) j["ipv6Addr"] = o.m_Ipv6Addr;
  if (o.portIsSet()) j["port"] = o.m_Port;
  if (o.securityMethodsIsSet() || !o.m_SecurityMethods.empty())
    j["securityMethods"] = o.m_SecurityMethods;
}

void from_json(const nlohmann::json& j, InterfaceDescription& o) {
  if (j.find("ipv4Addr") != j.end()) {
    j.at("ipv4Addr").get_to(o.m_Ipv4Addr);
    o.m_Ipv4AddrIsSet = true;
  }
  if (j.find("ipv6Addr") != j.end()) {
    j.at("ipv6Addr").get_to(o.m_Ipv6Addr);
    o.m_Ipv6AddrIsSet = true;
  }
  if (j.find("port") != j.end()) {
    j.at("port").get_to(o.m_Port);
    o.m_PortIsSet = true;
  }
  if (j.find("securityMethods") != j.end()) {
    j.at("securityMethods").get_to(o.m_SecurityMethods);
    o.m_SecurityMethodsIsSet = true;
  }
}

std::string InterfaceDescription::getIpv4Addr() const { return m_Ipv4Addr; }
void InterfaceDescription::setIpv4Addr(std::string const& value) {
  m_Ipv4Addr = value;
  m_Ipv4AddrIsSet = true;
}
bool InterfaceDescription::ipv4AddrIsSet() const { return m_Ipv4AddrIsSet; }
void InterfaceDescription::unsetIpv4Addr() { m_Ipv4AddrIsSet = false; }
std::string InterfaceDescription::getIpv6Addr() const { return m_Ipv6Addr; }
void InterfaceDescription::setIpv6Addr(std::string const& value) {
  m_Ipv6Addr = value;
  m_Ipv6AddrIsSet = true;
}
bool InterfaceDescription::ipv6AddrIsSet() const { return m_Ipv6AddrIsSet; }
void InterfaceDescription::unsetIpv6Addr() { m_Ipv6AddrIsSet = false; }
int32_t InterfaceDescription::getPort() const { return m_Port; }
void InterfaceDescription::setPort(int32_t const value) {
  m_Port = value;
  m_PortIsSet = true;
}
bool InterfaceDescription::portIsSet() const { return m_PortIsSet; }
void InterfaceDescription::unsetPort() { m_PortIsSet = false; }
std::vector<SecurityMethod> InterfaceDescription::getSecurityMethods() const {
  return m_SecurityMethods;
}
void InterfaceDescription::setSecurityMethods(
    std::vector<SecurityMethod> const& value) {
  m_SecurityMethods = value;
  m_SecurityMethodsIsSet = true;
}
bool InterfaceDescription::securityMethodsIsSet() const {
  return m_SecurityMethodsIsSet;
}
void InterfaceDescription::unsetSecurityMethods() {
  m_SecurityMethodsIsSet = false;
}

}  // namespace org::openapitools::server::model
