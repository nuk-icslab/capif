/**
 * CAPIF_Publish_Service_API
 * API for publishing service APIs. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "capif/model/PublishedApiPath.h"

#include <sstream>

#include "capif/model/Helpers.h"

namespace org::openapitools::server::model {

PublishedApiPath::PublishedApiPath() { m_CcfIdsIsSet = false; }

void PublishedApiPath::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw org::openapitools::server::helpers::ValidationException(msg.str());
  }
}

bool PublishedApiPath::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool PublishedApiPath::validate(std::stringstream& msg,
                                const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "PublishedApiPath" : pathPrefix;

  if (ccfIdsIsSet()) {
    const std::vector<std::string>& value = m_CcfIds;
    const std::string currentValuePath = _pathPrefix + ".ccfIds";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i = 0;
      for (const std::string& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        i++;
      }
    }
  }

  return success;
}

bool PublishedApiPath::operator==(const PublishedApiPath& rhs) const {
  return

      ((!ccfIdsIsSet() && !rhs.ccfIdsIsSet()) ||
       (ccfIdsIsSet() && rhs.ccfIdsIsSet() && getCcfIds() == rhs.getCcfIds()))

          ;
}

bool PublishedApiPath::operator!=(const PublishedApiPath& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const PublishedApiPath& o) {
  j = nlohmann::json();
  if (o.ccfIdsIsSet() || !o.m_CcfIds.empty()) j["ccfIds"] = o.m_CcfIds;
}

void from_json(const nlohmann::json& j, PublishedApiPath& o) {
  if (j.find("ccfIds") != j.end()) {
    j.at("ccfIds").get_to(o.m_CcfIds);
    o.m_CcfIdsIsSet = true;
  }
}

std::vector<std::string> PublishedApiPath::getCcfIds() const {
  return m_CcfIds;
}
void PublishedApiPath::setCcfIds(std::vector<std::string> const& value) {
  m_CcfIds = value;
  m_CcfIdsIsSet = true;
}
bool PublishedApiPath::ccfIdsIsSet() const { return m_CcfIdsIsSet; }
void PublishedApiPath::unsetCcfIds() { m_CcfIdsIsSet = false; }

}  // namespace org::openapitools::server::model
