/**
 * CAPIF_Publish_Service_API
 * API for publishing service APIs. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "capif/model/DataFormat_anyOf.h"

#include <sstream>
#include <stdexcept>

#include "capif/model/Helpers.h"

namespace org::openapitools::server::model {

DataFormat_anyOf::DataFormat_anyOf() {}

void DataFormat_anyOf::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw org::openapitools::server::helpers::ValidationException(msg.str());
  }
}

bool DataFormat_anyOf::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool DataFormat_anyOf::validate(std::stringstream& msg,
                                const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "DataFormat_anyOf" : pathPrefix;

  if (m_value ==
      DataFormat_anyOf::eDataFormat_anyOf::INVALID_VALUE_OPENAPI_GENERATED) {
    success = false;
    msg << _pathPrefix << ": has no value;";
  }

  return success;
}

bool DataFormat_anyOf::operator==(const DataFormat_anyOf& rhs) const {
  return getValue() == rhs.getValue()

      ;
}

bool DataFormat_anyOf::operator!=(const DataFormat_anyOf& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const DataFormat_anyOf& o) {
  j = nlohmann::json();

  switch (o.getValue()) {
    case DataFormat_anyOf::eDataFormat_anyOf::INVALID_VALUE_OPENAPI_GENERATED:
      j = "INVALID_VALUE_OPENAPI_GENERATED";
      break;
    case DataFormat_anyOf::eDataFormat_anyOf::JSON:
      j = "JSON";
      break;
  }
}

void from_json(const nlohmann::json& j, DataFormat_anyOf& o) {
  auto s = j.get<std::string>();
  if (s == "JSON") {
    o.setValue(DataFormat_anyOf::eDataFormat_anyOf::JSON);
  } else {
    std::stringstream ss;
    ss << "Unexpected value " << s << " in json"
       << " cannot be converted to enum of type"
       << " DataFormat_anyOf::eDataFormat_anyOf";
    throw std::invalid_argument(ss.str());
  }
}

DataFormat_anyOf::eDataFormat_anyOf DataFormat_anyOf::getValue() const {
  return m_value;
}
void DataFormat_anyOf::setValue(DataFormat_anyOf::eDataFormat_anyOf value) {
  m_value = value;
}

}  // namespace org::openapitools::server::model
