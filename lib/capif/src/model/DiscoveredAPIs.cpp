/**
 * CAPIF_Discover_Service_API
 * API for discovering service APIs. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "capif/model/DiscoveredAPIs.h"

#include <sstream>

#include "capif/model/Helpers.h"

namespace org::openapitools::server::model {

DiscoveredAPIs::DiscoveredAPIs() { m_ServiceAPIDescriptionsIsSet = false; }

void DiscoveredAPIs::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw org::openapitools::server::helpers::ValidationException(msg.str());
  }
}

bool DiscoveredAPIs::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool DiscoveredAPIs::validate(std::stringstream& msg,
                              const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "DiscoveredAPIs" : pathPrefix;

  if (serviceAPIDescriptionsIsSet()) {
    const std::vector<ServiceAPIDescription>& value = m_ServiceAPIDescriptions;
    const std::string currentValuePath =
        _pathPrefix + ".serviceAPIDescriptions";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i = 0;
      for (const ServiceAPIDescription& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".serviceAPIDescriptions") &&
            success;

        i++;
      }
    }
  }

  return success;
}

bool DiscoveredAPIs::operator==(const DiscoveredAPIs& rhs) const {
  return

      ((!serviceAPIDescriptionsIsSet() && !rhs.serviceAPIDescriptionsIsSet()) ||
       (serviceAPIDescriptionsIsSet() && rhs.serviceAPIDescriptionsIsSet() &&
        getServiceAPIDescriptions() == rhs.getServiceAPIDescriptions()))

          ;
}

bool DiscoveredAPIs::operator!=(const DiscoveredAPIs& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const DiscoveredAPIs& o) {
  j = nlohmann::json();
  if (o.serviceAPIDescriptionsIsSet() || !o.m_ServiceAPIDescriptions.empty())
    j["serviceAPIDescriptions"] = o.m_ServiceAPIDescriptions;
}

void from_json(const nlohmann::json& j, DiscoveredAPIs& o) {
  if (j.find("serviceAPIDescriptions") != j.end()) {
    j.at("serviceAPIDescriptions").get_to(o.m_ServiceAPIDescriptions);
    o.m_ServiceAPIDescriptionsIsSet = true;
  }
}

std::vector<ServiceAPIDescription> DiscoveredAPIs::getServiceAPIDescriptions()
    const {
  return m_ServiceAPIDescriptions;
}
void DiscoveredAPIs::setServiceAPIDescriptions(
    std::vector<ServiceAPIDescription> const& value) {
  m_ServiceAPIDescriptions = value;
  m_ServiceAPIDescriptionsIsSet = true;
}
bool DiscoveredAPIs::serviceAPIDescriptionsIsSet() const {
  return m_ServiceAPIDescriptionsIsSet;
}
void DiscoveredAPIs::unsetServiceAPIDescriptions() {
  m_ServiceAPIDescriptionsIsSet = false;
}

}  // namespace org::openapitools::server::model
