/**
 * CAPIF_Publish_Service_API
 * API for publishing service APIs. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "capif/model/CommunicationType_anyOf.h"

#include <sstream>
#include <stdexcept>

#include "capif/model/Helpers.h"

namespace org::openapitools::server::model {

CommunicationType_anyOf::CommunicationType_anyOf() {}

void CommunicationType_anyOf::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw org::openapitools::server::helpers::ValidationException(msg.str());
  }
}

bool CommunicationType_anyOf::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool CommunicationType_anyOf::validate(std::stringstream& msg,
                                       const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "CommunicationType_anyOf" : pathPrefix;

  if (m_value == CommunicationType_anyOf::eCommunicationType_anyOf::
                     INVALID_VALUE_OPENAPI_GENERATED) {
    success = false;
    msg << _pathPrefix << ": has no value;";
  }

  return success;
}

bool CommunicationType_anyOf::operator==(
    const CommunicationType_anyOf& rhs) const {
  return getValue() == rhs.getValue()

      ;
}

bool CommunicationType_anyOf::operator!=(
    const CommunicationType_anyOf& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CommunicationType_anyOf& o) {
  j = nlohmann::json();

  switch (o.getValue()) {
    case CommunicationType_anyOf::eCommunicationType_anyOf::
        INVALID_VALUE_OPENAPI_GENERATED:
      j = "INVALID_VALUE_OPENAPI_GENERATED";
      break;
    case CommunicationType_anyOf::eCommunicationType_anyOf::REQUEST_RESPONSE:
      j = "REQUEST_RESPONSE";
      break;
    case CommunicationType_anyOf::eCommunicationType_anyOf::SUBSCRIBE_NOTIFY:
      j = "SUBSCRIBE_NOTIFY";
      break;
  }
}

void from_json(const nlohmann::json& j, CommunicationType_anyOf& o) {
  auto s = j.get<std::string>();
  if (s == "REQUEST_RESPONSE") {
    o.setValue(
        CommunicationType_anyOf::eCommunicationType_anyOf::REQUEST_RESPONSE);
  } else if (s == "SUBSCRIBE_NOTIFY") {
    o.setValue(
        CommunicationType_anyOf::eCommunicationType_anyOf::SUBSCRIBE_NOTIFY);
  } else {
    std::stringstream ss;
    ss << "Unexpected value " << s << " in json"
       << " cannot be converted to enum of type"
       << " CommunicationType_anyOf::eCommunicationType_anyOf";
    throw std::invalid_argument(ss.str());
  }
}

CommunicationType_anyOf::eCommunicationType_anyOf
CommunicationType_anyOf::getValue() const {
  return m_value;
}
void CommunicationType_anyOf::setValue(
    CommunicationType_anyOf::eCommunicationType_anyOf value) {
  m_value = value;
}

}  // namespace org::openapitools::server::model
