/**
 * CAPIF_Publish_Service_API
 * API for publishing service APIs. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "capif/model/Operation_anyOf.h"

#include <sstream>
#include <stdexcept>

#include "capif/model/Helpers.h"

namespace org::openapitools::server::model {

Operation_anyOf::Operation_anyOf() {}

void Operation_anyOf::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw org::openapitools::server::helpers::ValidationException(msg.str());
  }
}

bool Operation_anyOf::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool Operation_anyOf::validate(std::stringstream& msg,
                               const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "Operation_anyOf" : pathPrefix;

  if (m_value ==
      Operation_anyOf::eOperation_anyOf::INVALID_VALUE_OPENAPI_GENERATED) {
    success = false;
    msg << _pathPrefix << ": has no value;";
  }

  return success;
}

bool Operation_anyOf::operator==(const Operation_anyOf& rhs) const {
  return getValue() == rhs.getValue()

      ;
}

bool Operation_anyOf::operator!=(const Operation_anyOf& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Operation_anyOf& o) {
  j = nlohmann::json();

  switch (o.getValue()) {
    case Operation_anyOf::eOperation_anyOf::INVALID_VALUE_OPENAPI_GENERATED:
      j = "INVALID_VALUE_OPENAPI_GENERATED";
      break;
    case Operation_anyOf::eOperation_anyOf::GET:
      j = "GET";
      break;
    case Operation_anyOf::eOperation_anyOf::POST:
      j = "POST";
      break;
    case Operation_anyOf::eOperation_anyOf::PUT:
      j = "PUT";
      break;
    case Operation_anyOf::eOperation_anyOf::PATCH:
      j = "PATCH";
      break;
    case Operation_anyOf::eOperation_anyOf::DELETE:
      j = "DELETE";
      break;
  }
}

void from_json(const nlohmann::json& j, Operation_anyOf& o) {
  auto s = j.get<std::string>();
  if (s == "GET") {
    o.setValue(Operation_anyOf::eOperation_anyOf::GET);
  } else if (s == "POST") {
    o.setValue(Operation_anyOf::eOperation_anyOf::POST);
  } else if (s == "PUT") {
    o.setValue(Operation_anyOf::eOperation_anyOf::PUT);
  } else if (s == "PATCH") {
    o.setValue(Operation_anyOf::eOperation_anyOf::PATCH);
  } else if (s == "DELETE") {
    o.setValue(Operation_anyOf::eOperation_anyOf::DELETE);
  } else {
    std::stringstream ss;
    ss << "Unexpected value " << s << " in json"
       << " cannot be converted to enum of type"
       << " Operation_anyOf::eOperation_anyOf";
    throw std::invalid_argument(ss.str());
  }
}

Operation_anyOf::eOperation_anyOf Operation_anyOf::getValue() const {
  return m_value;
}
void Operation_anyOf::setValue(Operation_anyOf::eOperation_anyOf value) {
  m_value = value;
}

}  // namespace org::openapitools::server::model
