/**
 * CAPIF_Discover_Service_API
 * API for discovering service APIs. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "capif/api/DiscoverServiceServer.h"

#include <nlohmann/json.hpp>

#include "capif/model/Helpers.h"

namespace org::openapitools::server::api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

const std::string DiscoverServiceServer::base = "/service-apis/v1";

DiscoverServiceServer::DiscoverServiceServer(
    const std::shared_ptr<Pistache::Rest::Router> &rtr)
    : router(rtr) {}

void DiscoverServiceServer::init() { setupRoutes(); }

void DiscoverServiceServer::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Get(
      *router, base + "/allServiceAPIs",
      Routes::bind(&DiscoverServiceServer::all_service_apis_get_handler, this));
}

std::pair<Pistache::Http::Code, std::string>
DiscoverServiceServer::handleParsingException(
    const std::exception &ex) const noexcept {
  try {
    throw;
  } catch (nlohmann::detail::exception &e) {
    return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
  } catch (org::openapitools::server::helpers::ValidationException &e) {
    return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
  } catch (std::exception &e) {
    return std::make_pair(Pistache::Http::Code::Internal_Server_Error,
                          e.what());
  }
}

std::pair<Pistache::Http::Code, std::string>
DiscoverServiceServer::handleOperationException(
    const std::exception &ex) const noexcept {
  return std::make_pair(Pistache::Http::Code::Internal_Server_Error, ex.what());
}

void DiscoverServiceServer::all_service_apis_get_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  try {
    // Getting the query params
    auto apiInvokerIdQuery = request.query().get("api-invoker-id");
    std::string apiInvokerId;
    if (!apiInvokerIdQuery) {
      throw "Missing api-invoker-id";
    }
    apiInvokerId = *apiInvokerIdQuery;
    auto apiNameQuery = request.query().get("api-name");
    std::optional<std::string> apiName;
    if (apiNameQuery) {
      apiName = *apiNameQuery;
    }
    auto apiVersionQuery = request.query().get("api-version");
    std::optional<std::string> apiVersion;
    if (apiVersionQuery) {
      apiVersion = apiVersionQuery;
    }
    auto commTypeQuery = request.query().get("comm-type");
    std::optional<CommunicationType> commType;
    CommunicationType _commType;
    if (commTypeQuery) {
      from_json(nlohmann::json(*commTypeQuery), _commType);
      commType = _commType;
    }
    auto protocolQuery = request.query().get("protocol");
    std::optional<Protocol> protocol;
    Protocol _protocol;
    if (protocolQuery) {
      from_json(nlohmann::json(*protocolQuery), _protocol);
      protocol = _protocol;
    }
    auto aefIdQuery = request.query().get("aef-id");
    std::optional<std::string> aefId;
    if (aefIdQuery) {
      aefId = aefIdQuery;
    }
    auto dataFormatQuery = request.query().get("data-format");
    std::optional<DataFormat> dataFormat;
    DataFormat _dataFormat;
    if (dataFormatQuery) {
      from_json(nlohmann::json(*dataFormatQuery), _dataFormat);
      dataFormat = _dataFormat;
    }
    auto apiCatQuery = request.query().get("api-cat");
    std::optional<std::string> apiCat;
    if (apiCatQuery) {
      apiCat = apiCatQuery;
    }
    auto supportedFeaturesQuery = request.query().get("supported-features");
    std::optional<std::string> supportedFeatures;
    if (supportedFeaturesQuery) {
      supportedFeatures = supportedFeaturesQuery;
    }
    auto apiSupportedFeaturesQuery =
        request.query().get("api-supported-features");
    std::optional<std::string> apiSupportedFeatures;
    if (apiSupportedFeaturesQuery) {
      apiSupportedFeatures = apiSupportedFeaturesQuery;
    }

    try {
      this->all_service_apis_get(apiInvokerId, apiName, apiVersion, commType,
                                 protocol, aefId, dataFormat, apiCat,
                                 supportedFeatures, apiSupportedFeatures,
                                 response);
    } catch (Pistache::Http::HttpError &e) {
      response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
      return;
    } catch (std::exception &e) {
      const std::pair<Pistache::Http::Code, std::string> errorInfo =
          this->handleOperationException(e);
      response.send(errorInfo.first, errorInfo.second);
      return;
    }
  } catch (const char *e) {
    response.send(Pistache::Http::Code::Bad_Request, e);
  } catch (std::exception &e) {
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
  }
}

void DiscoverServiceServer::default_api_default_handler(
    const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

}  // namespace org::openapitools::server::api
