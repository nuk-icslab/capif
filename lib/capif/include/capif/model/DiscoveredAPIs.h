/**
 * CAPIF_Discover_Service_API
 * API for discovering service APIs. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * DiscoveredAPIs.h
 *
 * Represents a list of APIs currently registered in the CAPIF core function and
 * satisfying a number of filter criteria provided by the API consumer.
 */

#ifndef DiscoveredAPIs_H_
#define DiscoveredAPIs_H_

#include <nlohmann/json.hpp>
#include <vector>

#include "capif/model/ServiceAPIDescription.h"

namespace org::openapitools::server::model {

/// <summary>
/// Represents a list of APIs currently registered in the CAPIF core function
/// and satisfying a number of filter criteria provided by the API consumer.
/// </summary>
class DiscoveredAPIs {
 public:
  DiscoveredAPIs();
  virtual ~DiscoveredAPIs() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const DiscoveredAPIs& rhs) const;
  bool operator!=(const DiscoveredAPIs& rhs) const;

  /////////////////////////////////////////////
  /// DiscoveredAPIs members

  /// <summary>
  /// Description of the service API as published by the service. Each service
  /// API description shall include AEF profiles matching the filter criteria.
  /// </summary>
  std::vector<ServiceAPIDescription> getServiceAPIDescriptions() const;
  void setServiceAPIDescriptions(
      std::vector<ServiceAPIDescription> const& value);
  bool serviceAPIDescriptionsIsSet() const;
  void unsetServiceAPIDescriptions();

  friend void to_json(nlohmann::json& j, const DiscoveredAPIs& o);
  friend void from_json(const nlohmann::json& j, DiscoveredAPIs& o);

 protected:
  std::vector<ServiceAPIDescription> m_ServiceAPIDescriptions;
  bool m_ServiceAPIDescriptionsIsSet;
};

}  // namespace org::openapitools::server::model

#endif /* DiscoveredAPIs_H_ */
