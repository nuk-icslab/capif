/**
 * CAPIF_Publish_Service_API
 * API for publishing service APIs. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "DefaultApiImpl.h"

#include <sstream>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

DefaultApiImpl::DefaultApiImpl(
    const std::shared_ptr<Pistache::Rest::Router> &rtr)
    : DefaultApi(rtr) {}

void DefaultApiImpl::apf_id_service_apis_get(
    const std::string &apfId, Pistache::Http::ResponseWriter &response) {
  std::string res;
  res = "Get service API\n";
  res += "apfId=" + apfId + "\n";

  response.send(Pistache::Http::Code::Ok, res);
}
void DefaultApiImpl::apf_id_service_apis_post(
    const std::string &apfId,
    const ServiceAPIDescription &serviceAPIDescription,
    Pistache::Http::ResponseWriter &response) {
  std::string res;
  res = "Post service API\n";
  res += "apfId=" + apfId + "\n";
  res += "apiName=" + serviceAPIDescription.getApiName() + "\n";

  response.send(Pistache::Http::Code::Ok, res);
}
void DefaultApiImpl::apf_id_service_apis_service_api_id_delete(
    const std::string &serviceApiId, const std::string &apfId,
    Pistache::Http::ResponseWriter &response) {
  std::string res;
  res = "Delete service API\n";
  res += "apfId=" + apfId + "\n";
  res += "serviceApiId=" + serviceApiId + "\n";

  response.send(Pistache::Http::Code::Ok, res);
}
void DefaultApiImpl::apf_id_service_apis_service_api_id_get(
    const std::string &serviceApiId, const std::string &apfId,
    Pistache::Http::ResponseWriter &response) {
  std::string res;
  res = "Get service API\n";
  res += "apfId=" + apfId + "\n";
  res += "serviceApiId=" + serviceApiId + "\n";
  response.send(Pistache::Http::Code::Ok, res);
}
void DefaultApiImpl::apf_id_service_apis_service_api_id_put(
    const std::string &serviceApiId, const std::string &apfId,
    const ServiceAPIDescription &serviceAPIDescription,
    Pistache::Http::ResponseWriter &response) {
  std::string res;
  res = "Update service API\n";
  res += "apfId=" + apfId + "\n";
  res += "serviceApiId=" + serviceApiId + "\n";
  response.send(Pistache::Http::Code::Ok, res);
}

}  // namespace api
}  // namespace server
}  // namespace openapitools
}  // namespace org
