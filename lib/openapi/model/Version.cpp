/**
* CAPIF_Publish_Service_API
* API for publishing service APIs. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Version.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Version::Version()
{
    m_ApiVersion = "";
    m_Expiry = "";
    m_ExpiryIsSet = false;
    m_ResourcesIsSet = false;
    m_CustOperationsIsSet = false;
    
}

void Version::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Version::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Version::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Version" : pathPrefix;

                 
    if (resourcesIsSet())
    {
        const std::vector<Resource>& value = m_Resources;
        const std::string currentValuePath = _pathPrefix + ".resources";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const Resource& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".resources") && success;
 
                i++;
            }
        }

    }
         
    if (custOperationsIsSet())
    {
        const std::vector<CustomOperation>& value = m_CustOperations;
        const std::string currentValuePath = _pathPrefix + ".custOperations";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const CustomOperation& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".custOperations") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool Version::operator==(const Version& rhs) const
{
    return
    
    
    (getApiVersion() == rhs.getApiVersion())
     &&
    
    
    ((!expiryIsSet() && !rhs.expiryIsSet()) || (expiryIsSet() && rhs.expiryIsSet() && getExpiry() == rhs.getExpiry())) &&
    
    
    ((!resourcesIsSet() && !rhs.resourcesIsSet()) || (resourcesIsSet() && rhs.resourcesIsSet() && getResources() == rhs.getResources())) &&
    
    
    ((!custOperationsIsSet() && !rhs.custOperationsIsSet()) || (custOperationsIsSet() && rhs.custOperationsIsSet() && getCustOperations() == rhs.getCustOperations()))
    
    ;
}

bool Version::operator!=(const Version& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Version& o)
{
    j = nlohmann::json();
    j["apiVersion"] = o.m_ApiVersion;
    if(o.expiryIsSet())
        j["expiry"] = o.m_Expiry;
    if(o.resourcesIsSet() || !o.m_Resources.empty())
        j["resources"] = o.m_Resources;
    if(o.custOperationsIsSet() || !o.m_CustOperations.empty())
        j["custOperations"] = o.m_CustOperations;
    
}

void from_json(const nlohmann::json& j, Version& o)
{
    j.at("apiVersion").get_to(o.m_ApiVersion);
    if(j.find("expiry") != j.end())
    {
        j.at("expiry").get_to(o.m_Expiry);
        o.m_ExpiryIsSet = true;
    } 
    if(j.find("resources") != j.end())
    {
        j.at("resources").get_to(o.m_Resources);
        o.m_ResourcesIsSet = true;
    } 
    if(j.find("custOperations") != j.end())
    {
        j.at("custOperations").get_to(o.m_CustOperations);
        o.m_CustOperationsIsSet = true;
    } 
    
}

std::string Version::getApiVersion() const
{
    return m_ApiVersion;
}
void Version::setApiVersion(std::string const& value)
{
    m_ApiVersion = value;
}
std::string Version::getExpiry() const
{
    return m_Expiry;
}
void Version::setExpiry(std::string const& value)
{
    m_Expiry = value;
    m_ExpiryIsSet = true;
}
bool Version::expiryIsSet() const
{
    return m_ExpiryIsSet;
}
void Version::unsetExpiry()
{
    m_ExpiryIsSet = false;
}
std::vector<Resource> Version::getResources() const
{
    return m_Resources;
}
void Version::setResources(std::vector<Resource> const& value)
{
    m_Resources = value;
    m_ResourcesIsSet = true;
}
bool Version::resourcesIsSet() const
{
    return m_ResourcesIsSet;
}
void Version::unsetResources()
{
    m_ResourcesIsSet = false;
}
std::vector<CustomOperation> Version::getCustOperations() const
{
    return m_CustOperations;
}
void Version::setCustOperations(std::vector<CustomOperation> const& value)
{
    m_CustOperations = value;
    m_CustOperationsIsSet = true;
}
bool Version::custOperationsIsSet() const
{
    return m_CustOperationsIsSet;
}
void Version::unsetCustOperations()
{
    m_CustOperationsIsSet = false;
}


} // namespace org::openapitools::server::model

