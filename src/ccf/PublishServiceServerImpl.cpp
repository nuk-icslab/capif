/**
 * CAPIF_Publish_Service_API
 * API for publishing service APIs. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PublishServiceServerImpl.h"

#include <fmt/core.h>
#include <spdlog/spdlog.h>

#include <mongocxx/exception/exception.hpp>
#include <nlohmann/json.hpp>
#include <sstream>

#include "util.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

const std::string API_ROOT = "http://localhost:8080";

PublishServiceServerImpl::PublishServiceServerImpl(
    const std::shared_ptr<Pistache::Rest::Router> &rtr,
    const std::shared_ptr<mongocxx::database> &database)
    : PublishServiceServer(rtr), db(database) {
  api_collection = (*db)["apis"];
}

void PublishServiceServerImpl::apf_id_service_apis_get(
    const std::string &apfId, Pistache::Http::ResponseWriter &response) {
  std::string res;
  res = "Retrieve all published APIs\n";
  res += "apfId=" + apfId + "\n";

  response.send(Pistache::Http::Code::Ok, res);
}
void PublishServiceServerImpl::apf_id_service_apis_post(
    const std::string &apfId,
    const ServiceAPIDescription &serviceAPIDescription,
    Pistache::Http::ResponseWriter &response) {
  try {
    nlohmann::json res;

    nlohmann::json json_obj;
    to_json(json_obj, serviceAPIDescription);

    spdlog::info("Received an API publishing request:\n{}", json_obj.dump(4));

    bsoncxx::document::value document = util::njson2bsoncxx(json_obj);

    auto result = api_collection.insert_one(std::move(document));
    std::string api_id = result->inserted_id().get_oid().value.to_string();
    spdlog::info("New API insered to database, API_ID={}", api_id);

    std::string new_resource_locaiton = fmt::format(
        "{}/published-apis/v1/{}/service-apis/{}", API_ROOT, apfId, api_id);

    res["apiName"] = serviceAPIDescription.getApiName();
    res["apiId"] = api_id;

    response.headers()
        .add<Pistache::Http::Header::Location>(new_resource_locaiton)
        .add<Pistache::Http::Header::ContentType>(MIME(Application, Json));
    response.send(Pistache::Http::Code::Ok, res.dump());
  } catch (mongocxx::exception &e) {
    spdlog::error("An exception occurred when inserting to database: {}",
                  e.what());
    spdlog::error("No new API will be inserted.");
    response.send(Pistache::Http::Code::Internal_Server_Error);
  }
}
void PublishServiceServerImpl::apf_id_service_apis_service_api_id_delete(
    const std::string &serviceApiId, const std::string &apfId,
    Pistache::Http::ResponseWriter &response) {
  std::string res;
  res = "Unpublish a published service API\n";
  res += "apfId=" + apfId + "\n";
  res += "serviceApiId=" + serviceApiId + "\n";

  response.send(Pistache::Http::Code::Ok, res);
}
void PublishServiceServerImpl::apf_id_service_apis_service_api_id_get(
    const std::string &serviceApiId, const std::string &apfId,
    Pistache::Http::ResponseWriter &response) {
  std::string res;
  res = "Retrieve a published service API\n";
  res += "apfId=" + apfId + "\n";
  res += "serviceApiId=" + serviceApiId + "\n";
  response.send(Pistache::Http::Code::Ok, res);
}
void PublishServiceServerImpl::apf_id_service_apis_service_api_id_put(
    const std::string &serviceApiId, const std::string &apfId,
    const ServiceAPIDescription &serviceAPIDescription,
    Pistache::Http::ResponseWriter &response) {
  std::string res;
  res = "Update a published service API\n";
  res += "apfId=" + apfId + "\n";
  res += "serviceApiId=" + serviceApiId + "\n";
  response.send(Pistache::Http::Code::Ok, res);
}

}  // namespace api
}  // namespace server
}  // namespace openapitools
}  // namespace org
