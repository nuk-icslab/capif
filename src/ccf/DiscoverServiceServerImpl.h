/**
 * CAPIF_Discover_Service_API
 * API for discovering service APIs. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

/*
 * DiscoverServiceServerImpl.h
 *
 *
 */

#ifndef DISCOVER_SERVICE_SERVER_IMPL_H_
#define DISCOVER_SERVICE_SERVER_IMPL_H_

#include <fmt/core.h>
#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>
#include <spdlog/spdlog.h>

#include <bsoncxx/builder/stream/document.hpp>
#include <bsoncxx/builder/stream/helpers.hpp>
#include <bsoncxx/exception/exception.hpp>
#include <memory>
#include <mongocxx/client.hpp>
#include <mongocxx/exception/exception.hpp>
#include <mongocxx/instance.hpp>
#include <mongocxx/stdx.hpp>
#include <mongocxx/uri.hpp>
#include <nlohmann/json.hpp>
#include <string>

#include "capif/api/DiscoverServiceServer.h"
#include "capif/model/CommunicationType.h"
#include "capif/model/DataFormat.h"
#include "capif/model/DiscoveredAPIs.h"
#include "capif/model/ProblemDetails.h"
#include "capif/model/Protocol.h"

namespace org::openapitools::server::api {

using namespace org::openapitools::server::model;

class DiscoverServiceServerImpl
    : public org::openapitools::server::api::DiscoverServiceServer {
 public:
  explicit DiscoverServiceServerImpl(
      const std::shared_ptr<Pistache::Rest::Router> &rtr,
      const std::shared_ptr<mongocxx::database> &database);
  ~DiscoverServiceServerImpl() override = default;

  void all_service_apis_get(
      const std::string &apiInvokerId,
      const std::optional<std::string> &apiName,
      const std::optional<std::string> &apiVersion,
      const std::optional<CommunicationType> &commType,
      const std::optional<Protocol> &protocol,
      const std::optional<std::string> &aefId,
      const std::optional<DataFormat> &dataFormat,
      const std::optional<std::string> &apiCat,
      const std::optional<std::string> &supportedFeatures,
      const std::optional<std::string> &apiSupportedFeatures,
      Pistache::Http::ResponseWriter &response);

 private:
  std::shared_ptr<mongocxx::database> db;
  mongocxx::collection api_collection;
};

}  // namespace org::openapitools::server::api

#endif
