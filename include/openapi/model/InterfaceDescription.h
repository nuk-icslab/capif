/**
* CAPIF_Publish_Service_API
* API for publishing service APIs. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * InterfaceDescription.h
 *
 * Represents the description of an API&#39;s interface.
 */

#ifndef InterfaceDescription_H_
#define InterfaceDescription_H_


#include <string>
#include "SecurityMethod.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Represents the description of an API&#39;s interface.
/// </summary>
class  InterfaceDescription
{
public:
    InterfaceDescription();
    virtual ~InterfaceDescription() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const InterfaceDescription& rhs) const;
    bool operator!=(const InterfaceDescription& rhs) const;

    /////////////////////////////////////////////
    /// InterfaceDescription members

    /// <summary>
    /// string identifying a Ipv4 address formatted in the \&quot;dotted decimal\&quot; notation as defined in IETF RFC 1166.
    /// </summary>
    std::string getIpv4Addr() const;
    void setIpv4Addr(std::string const& value);
    bool ipv4AddrIsSet() const;
    void unsetIpv4Addr();
    /// <summary>
    /// string identifying a Ipv6 address formatted according to clause 4 in IETF RFC 5952. The mixed Ipv4 Ipv6 notation according to clause 5 of IETF RFC 5952 shall not be used.
    /// </summary>
    std::string getIpv6Addr() const;
    void setIpv6Addr(std::string const& value);
    bool ipv6AddrIsSet() const;
    void unsetIpv6Addr();
    /// <summary>
    /// Unsigned integer with valid values between 0 and 65535.
    /// </summary>
    int32_t getPort() const;
    void setPort(int32_t const value);
    bool portIsSet() const;
    void unsetPort();
    /// <summary>
    /// Security methods supported by the interface, it take precedence over the security methods provided in AefProfile, for this specific interface.
    /// </summary>
    std::vector<SecurityMethod> getSecurityMethods() const;
    void setSecurityMethods(std::vector<SecurityMethod> const& value);
    bool securityMethodsIsSet() const;
    void unsetSecurityMethods();

    friend void to_json(nlohmann::json& j, const InterfaceDescription& o);
    friend void from_json(const nlohmann::json& j, InterfaceDescription& o);
protected:
    std::string m_Ipv4Addr;
    bool m_Ipv4AddrIsSet;
    std::string m_Ipv6Addr;
    bool m_Ipv6AddrIsSet;
    int32_t m_Port;
    bool m_PortIsSet;
    std::vector<SecurityMethod> m_SecurityMethods;
    bool m_SecurityMethodsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* InterfaceDescription_H_ */
