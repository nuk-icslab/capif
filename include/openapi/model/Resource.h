/**
* CAPIF_Publish_Service_API
* API for publishing service APIs. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Resource.h
 *
 * Represents the API resource data.
 */

#ifndef Resource_H_
#define Resource_H_


#include <string>
#include "Operation.h"
#include <vector>
#include "CommunicationType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Represents the API resource data.
/// </summary>
class  Resource
{
public:
    Resource();
    virtual ~Resource() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const Resource& rhs) const;
    bool operator!=(const Resource& rhs) const;

    /////////////////////////////////////////////
    /// Resource members

    /// <summary>
    /// Resource name
    /// </summary>
    std::string getResourceName() const;
    void setResourceName(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    CommunicationType getCommType() const;
    void setCommType(CommunicationType const& value);
    /// <summary>
    /// Relative URI of the API resource, it is set as {apiSpecificResourceUriPart} part of the URI structure as defined in subclause 4.4 of 3GPP TS 29.501.
    /// </summary>
    std::string getUri() const;
    void setUri(std::string const& value);
    /// <summary>
    /// it is set as {custOpName} part of the URI structure for a custom operation associated with a resource as defined in subclause 4.4 of 3GPP TS 29.501.
    /// </summary>
    std::string getCustOpName() const;
    void setCustOpName(std::string const& value);
    bool custOpNameIsSet() const;
    void unsetCustOpName();
    /// <summary>
    /// Supported HTTP methods for the API resource. Only applicable when the protocol in AefProfile indicates HTTP.
    /// </summary>
    std::vector<Operation> getOperations() const;
    void setOperations(std::vector<Operation> const& value);
    bool operationsIsSet() const;
    void unsetOperations();
    /// <summary>
    /// Text description of the API resource
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string const& value);
    bool descriptionIsSet() const;
    void unsetDescription();

    friend void to_json(nlohmann::json& j, const Resource& o);
    friend void from_json(const nlohmann::json& j, Resource& o);
protected:
    std::string m_ResourceName;

    CommunicationType m_CommType;

    std::string m_Uri;

    std::string m_CustOpName;
    bool m_CustOpNameIsSet;
    std::vector<Operation> m_Operations;
    bool m_OperationsIsSet;
    std::string m_Description;
    bool m_DescriptionIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* Resource_H_ */
